import 'dart:convert';
import 'dart:async';
import 'package:flutter/services.dart';
import 'package:flutter/material.dart';
import 'package:pegadaian/detailNasabah.dart';
import 'validation_ktp.dart';
import 'package:intent/intent.dart' as android_intent;
import 'package:intent/action.dart' as android_action;
import 'package:uni_links/uni_links.dart';
//import 'package:shared_preferences/shared_preferences.dart';
//import 'package:external_app_launcher/external_app_launcher.dart';
//import 'package:intent/intent.dart';
//import 'dart:async' show StreamController;
//import 'dart:io';
//import 'package:meet_network_image/meet_network_image.dart';
//import 'package:toast/toast.dart';
import 'utils.dart' as util;

class VerifikasiKtp extends StatefulWidget {
  final String data;
  VerifikasiKtp({Key key, this.data});

  @override
  VerifikasiKtpState createState() => new VerifikasiKtpState();
}

// ignore: must_be_immutable
class VerifikasiKtpState extends State<VerifikasiKtp> with Validation {
  final formKey = GlobalKey<FormState>(); //MEMBUAT GLOBAL KEY UNTUK VALIDASI
  final GlobalKey<ScaffoldState> _scaffoldKey = new GlobalKey<ScaffoldState>();

  void showInSnackBar(String value) {
    _scaffoldKey.currentState.showSnackBar(new SnackBar(
        action: SnackBarAction(
          label: 'Close',
          textColor: Colors.white,
          onPressed: () {
            // Code to execute.
          },
        ),
        duration: const Duration(milliseconds: 2500),
        backgroundColor: Colors.green.shade800,
        content: new Text(value)));
    setState(() {});
  }

  //bool _ready = false;
  List<dynamic> _lstDataSiswa = [];
  //String _statusText = "";
  //TextEditingController _txtSearch = TextEditingController();
  //bool _flagAllowSearch = true;

  // DEFINE VARIABLE
  String nik = '';
  String nama = '';
  String alamat = '';
  String jk = '';
  String tempatLahir = '';
  String tglLahir = '';
  String rt = '';
  String rw = '';
  String kelurahan = '';
  String kecamatan = '';
  String agama = '';
  String statusKawin = '';
  String pekerjaan = '';
  String wargaNegara = '';
  var aRow;

  TextEditingController _nik;
  TextEditingController _nama;
  TextEditingController _alamat;
  TextEditingController _jk;
  TextEditingController _tempatLahir;
  TextEditingController _tglLahir;
  TextEditingController _rt;
  TextEditingController _rw;
  TextEditingController _kelurahan;
  TextEditingController _kecamatan;
  TextEditingController _agama;
  TextEditingController _statusKawin;
  TextEditingController _pekerjaan;
  TextEditingController _wargaNegara;

  @override
  void initState() {
    _loadData().then((d) {
      setState(() {});
    });
    super.initState();
  }

  Future<dynamic> _loadData() async {
    var aRow = widget.data.split("|");
    Map<String, String> mRequest = {
      "_user": util.UserData.userName,
      "_session": util.UserData.userSession,
      "cmd": "get_data_by_id",
      "id": aRow[0],
    };

    String data = await util.httpPost(util.url_api, mRequest);
    //_ready = true;
    var jObject = json.decode(data);
    //print('jobject: $jObject');
    if (jObject != null) {
      int vStatus = jObject["status"];
      String vDesc = jObject["desc"];
      //String v_cmd = jObject["cmd"];
      var vData = jObject["data"];
      if (vStatus == 1) {
        //. success
        _lstDataSiswa = vData;
        dynamic _r = _lstDataSiswa[0];
        _nik = TextEditingController(text: _r["nik"].toString());
        _nama = TextEditingController(text: _r["nama"].toString());
        _tempatLahir =
            TextEditingController(text: _r["tempat_lahir"].toString());
        _tglLahir = TextEditingController(text: _r["tgl_lahir"].toString());
        _jk = TextEditingController(text: _r["jk"].toString());
        _alamat = TextEditingController(text: _r["alamat"].toString());
        _rt = TextEditingController(text: _r["rt"].toString());
        _rw = TextEditingController(text: _r["rw"].toString());
        _kelurahan = TextEditingController(text: _r["kelurahan"].toString());
        _kecamatan = TextEditingController(text: _r["kecamatan"].toString());
        _agama = TextEditingController(text: _r["agama"].toString());
        _statusKawin =
            TextEditingController(text: _r["status_kawin"].toString());
        _pekerjaan = TextEditingController(text: _r["pekerjaan"].toString());
        _wargaNegara =
            TextEditingController(text: _r["warga_negara"].toString());
        //print('data siswa ketemu: $_lstDataSiswa');
      } else if (vStatus == -99) {
        //. expired
        _lstDataSiswa = [];
        return vDesc;
      } else {
        _lstDataSiswa = [];
      }
    }

    return true;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      key: _scaffoldKey,
      resizeToAvoidBottomInset: false,
      resizeToAvoidBottomPadding: false,
      appBar: AppBar(
        title: Text('Verifikasi KTP-el'),
        actions: <Widget>[saveButton(context)],
      ),
      body: SingleChildScrollView(
          reverse: true,
          child: Padding(
              padding: EdgeInsets.only(
                  bottom: MediaQuery.of(context).viewInsets.bottom),
              child: Form(
                  key: formKey, //MENGGUNAKAN GLOBAL KEY
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    mainAxisSize: MainAxisSize.min,
                    children: <Widget>[
                      SizedBox(height: 8),
                      Container(
                        child: Column(
                          children: <Widget>[
                            Card(
                                shape: RoundedRectangleBorder(
                                  borderRadius: BorderRadius.circular(20.0),
                                ),
                                semanticContainer: true,
                                clipBehavior: Clip.antiAliasWithSaveLayer,
                                elevation: 3,
                                child: Padding(
                                    padding: const EdgeInsets.only(
                                        left: 8.0, right: 8.0),
                                    child: Column(children: <Widget>[
                                      nikField(),
                                      nameField(),
                                      tempatField(),
                                      tgllahirField(),
                                      jkField(),
                                      alamatField(),
                                      rtField(),
                                      rwField(),
                                      kelurahanField(),
                                      kecamatanField(),
                                      agamaField(),
                                      statusKawinField(),
                                      pekerjaanField(),
                                      wargaNegaraField(),
                                      SizedBox(height: 42),
                                      Row(
                                        mainAxisAlignment:
                                            MainAxisAlignment.center,
                                        crossAxisAlignment:
                                            CrossAxisAlignment.center,
                                        children: <Widget>[
                                          Container(
                                              height: 50,
                                              width: MediaQuery.of(context)
                                                      .size
                                                      .width *
                                                  0.4,
                                              child: scanButton(context)),
                                          SizedBox(width: 22),
                                          Container(
                                              height: 50,
                                              width: MediaQuery.of(context)
                                                      .size
                                                      .width *
                                                  0.4,
                                              child: loadButton(context))
                                        ],
                                      ),
                                      SizedBox(height: 22),
                                    ]))),
                          ],
                        ),
                      ),
                      SizedBox(height: 15)
                    ],
                  )))),
    );
  }

  Widget nikField() {
    //MEMBUAT TEXT INPUT
    return TextFormField(
      controller: _nik,
      keyboardType: TextInputType.number,
      decoration: InputDecoration(labelText: 'NIK' //DENGAN LABEL Nama Lengkap
          ),
      validator:
          validateNik, //validateName ADALAH NAMA FUNGSI PADA FILE validation.dart
      onSaved: (String value) {
        //KETIKA LOLOS VALIDASI
        nik =
            value; //MAKA VARIABLE name AKAN DIISI DENGAN TEXT YANG TELAH DI-INPUT
      },
    );
  }

  Widget nameField() {
    //MEMBUAT TEXT INPUT
    return TextFormField(
      controller: _nama,
      decoration:
          InputDecoration(labelText: 'Nama Lengkap' //DENGAN LABEL Nama Lengkap
              ),
      validator:
          validateName, //validateName ADALAH NAMA FUNGSI PADA FILE validation.dart
      onSaved: (String value) {
        //KETIKA LOLOS VALIDASI
        nama =
            value; //MAKA VARIABLE name AKAN DIISI DENGAN TEXT YANG TELAH DI-INPUT
      },
    );
  }

  Widget tempatField() {
    //MEMBUAT TEXT INPUT
    return TextFormField(
      controller: _tempatLahir,
      decoration:
          InputDecoration(labelText: 'Tempat Lahir' //DENGAN LABEL Nama Lengkap
              ),
      validator:
          validateTempatLahir, //validateName ADALAH NAMA FUNGSI PADA FILE validation.dart
      onSaved: (String value) {
        //KETIKA LOLOS VALIDASI
        tempatLahir =
            value; //MAKA VARIABLE name AKAN DIISI DENGAN TEXT YANG TELAH DI-INPUT
      },
    );
  }

  Widget tgllahirField() {
    //MEMBUAT TEXT INPUT
    return TextFormField(
      controller: _tglLahir,
      keyboardType: TextInputType.datetime,
      inputFormatters: [
        WhitelistingTextInputFormatter.digitsOnly,
        LengthLimitingTextInputFormatter(8),
        new DOBInputFormatter()
      ],
      decoration:
          InputDecoration(labelText: 'Tanggal Lahir' //DENGAN LABEL Nama Lengkap
              ),
      validator:
          validateTglLahir, //validateName ADALAH NAMA FUNGSI PADA FILE validation.dart
      onSaved: (String value) {
        //KETIKA LOLOS VALIDASI
        tglLahir =
            value; //MAKA VARIABLE name AKAN DIISI DENGAN TEXT YANG TELAH DI-INPUT
      },
    );
  }

  Widget alamatField() {
    return TextFormField(
      controller: _alamat,
      keyboardType:
          TextInputType.emailAddress, // KEYBOARD TYPENYA ADALAH EMAIL ADDRESS
      //AGAR SYMBOL @ DILETAKKAN DIDEPAN KETIKA KEYBOARD DI TAMPILKAN
      maxLines: 4,
      maxLength: 251,
      decoration: InputDecoration(
        labelText: 'Alamat',
        //hintText: 'email@example.com',
      ),
      validator: validateAlamat, //BERLAKU SAMA DENGAN HELPERS SEBELUMNYA
      onSaved: (String value) {
        alamat = value;
      },
    );
  }

  Widget jkField() {
    return TextFormField(
      controller: _jk,
      //obscureText: true, //KETIKA obsecureText bernilai TRUE
      //MAKA SAMA DENGAN TYPE PASSWORD PADA HTML
      decoration: InputDecoration(
        labelText: 'Jenis Kelamin',
        //hintText: 'Enter Password',
      ),
      validator: validateJk, ////BERLAKU SAMA DENGAN HELPERS SEBELUMNYA
      onSaved: (String value) {
        jk = value;
      },
    );
  }

  Widget rtField() {
    //MEMBUAT TEXT INPUT
    return TextFormField(
      controller: _rt,
      keyboardType: TextInputType.number,
      inputFormatters: [
        WhitelistingTextInputFormatter.digitsOnly,
        LengthLimitingTextInputFormatter(3),
      ],
      decoration: InputDecoration(labelText: 'RT' //DENGAN LABEL Nama Lengkap
          ),
      validator:
          validateRW, //validateName ADALAH NAMA FUNGSI PADA FILE validation.dart
      onSaved: (String value) {
        //KETIKA LOLOS VALIDASI
        rt =
            value; //MAKA VARIABLE name AKAN DIISI DENGAN TEXT YANG TELAH DI-INPUT
      },
    );
  }

  Widget rwField() {
    //MEMBUAT TEXT INPUT
    return TextFormField(
      controller: _rw,
      keyboardType: TextInputType.number,
      inputFormatters: [
        WhitelistingTextInputFormatter.digitsOnly,
        LengthLimitingTextInputFormatter(3),
      ],
      decoration: InputDecoration(labelText: 'RW' //DENGAN LABEL Nama Lengkap
          ),
      validator:
          validateRW, //validateName ADALAH NAMA FUNGSI PADA FILE validation.dart
      onSaved: (String value) {
        //KETIKA LOLOS VALIDASI
        rw =
            value; //MAKA VARIABLE name AKAN DIISI DENGAN TEXT YANG TELAH DI-INPUT
      },
    );
  }

  Widget kelurahanField() {
    //MEMBUAT TEXT INPUT
    return TextFormField(
      controller: _kelurahan,
      decoration:
          InputDecoration(labelText: 'Kelurahan' //DENGAN LABEL Nama Lengkap
              ),
      validator:
          validateKelurahan, //validateName ADALAH NAMA FUNGSI PADA FILE validation.dart
      onSaved: (String value) {
        //KETIKA LOLOS VALIDASI
        kelurahan =
            value; //MAKA VARIABLE name AKAN DIISI DENGAN TEXT YANG TELAH DI-INPUT
      },
    );
  }

  Widget kecamatanField() {
    //MEMBUAT TEXT INPUT
    return TextFormField(
      controller: _kecamatan,
      decoration:
          InputDecoration(labelText: 'Kecamatan' //DENGAN LABEL Nama Lengkap
              ),
      validator:
          validateKecamatan, //validateName ADALAH NAMA FUNGSI PADA FILE validation.dart
      onSaved: (String value) {
        //KETIKA LOLOS VALIDASI
        kecamatan =
            value; //MAKA VARIABLE name AKAN DIISI DENGAN TEXT YANG TELAH DI-INPUT
      },
    );
  }

  Widget agamaField() {
    //MEMBUAT TEXT INPUT
    return TextFormField(
      controller: _agama,
      decoration: InputDecoration(labelText: 'Agama' //DENGAN LABEL Nama Lengkap
          ),
      validator:
          validateAgama, //validateName ADALAH NAMA FUNGSI PADA FILE validation.dart
      onSaved: (String value) {
        //KETIKA LOLOS VALIDASI
        agama =
            value; //MAKA VARIABLE name AKAN DIISI DENGAN TEXT YANG TELAH DI-INPUT
      },
    );
  }

  Widget statusKawinField() {
    //MEMBUAT TEXT INPUT
    return TextFormField(
      controller: _statusKawin,
      decoration: InputDecoration(
          labelText: 'Status Perkawinan' //DENGAN LABEL Nama Lengkap
          ),
      validator:
          validateStatusKawin, //validateName ADALAH NAMA FUNGSI PADA FILE validation.dart
      onSaved: (String value) {
        //KETIKA LOLOS VALIDASI
        statusKawin =
            value; //MAKA VARIABLE name AKAN DIISI DENGAN TEXT YANG TELAH DI-INPUT
      },
    );
  }

  Widget wargaNegaraField() {
    //MEMBUAT TEXT INPUT
    return TextFormField(
      controller: _wargaNegara,
      decoration: InputDecoration(
          labelText: 'Kewarganegaraan' //DENGAN LABEL Nama Lengkap
          ),
      validator:
          validateWargaNegara, //validateName ADALAH NAMA FUNGSI PADA FILE validation.dart
      onSaved: (String value) {
        //KETIKA LOLOS VALIDASI
        wargaNegara =
            value; //MAKA VARIABLE name AKAN DIISI DENGAN TEXT YANG TELAH DI-INPUT
      },
    );
  }

  Widget pekerjaanField() {
    //MEMBUAT TEXT INPUT
    return TextFormField(
      controller: _pekerjaan,
      decoration:
          InputDecoration(labelText: 'Pekerjaan' //DENGAN LABEL Nama Lengkap
              ),
      validator:
          validatePekerjaan, //validateName ADALAH NAMA FUNGSI PADA FILE validation.dart
      onSaved: (String value) {
        //KETIKA LOLOS VALIDASI
        pekerjaan =
            value; //MAKA VARIABLE name AKAN DIISI DENGAN TEXT YANG TELAH DI-INPUT
      },
    );
  }

  initUniLinks() async {
    // Platform messages may fail, so we use a try/catch PlatformException.
    //SharedPreferences prefs = await SharedPreferences.getInstance();
    try {
      var initialLink = await getInitialLink();
      if (initialLink != null) {
        var a = [];
        var b = [];
        a = initialLink.split('surveyor://send?logs=');
        b.add(a[1]);
        dynamic c = b;
        var dataKtp = json.decode(c[0]);
        _nik = TextEditingController(text: dataKtp["nik"].toString());
        _nama = TextEditingController(text: dataKtp["nama"].toString());
        _tempatLahir = TextEditingController(text: dataKtp["pob"].toString());
        _tglLahir = TextEditingController(text: dataKtp["dob"].toString());
        _jk = TextEditingController(text: dataKtp["jenis_kelamin"].toString());
        _alamat = TextEditingController(text: dataKtp["alamat"].toString());
        _rt = TextEditingController(text: dataKtp["rt"].toString());
        _rw = TextEditingController(text: dataKtp["rw"].toString());
        _kelurahan =
            TextEditingController(text: dataKtp["kelurahan_desa"].toString());
        _kecamatan =
            TextEditingController(text: dataKtp["kecamatan"].toString());
        _agama = TextEditingController(text: dataKtp["agama"].toString());
        _statusKawin = TextEditingController(
            text: dataKtp["status_perkawinan"].toString());
        _pekerjaan =
            TextEditingController(text: dataKtp["pekerjaan"].toString());
        _wargaNegara =
            TextEditingController(text: dataKtp["kewarganegaraan"].toString());

        FocusScope.of(context).nextFocus();
        print('datanya $dataKtp');
        //await prefs.setInt('dataKtp', dataKtp);
      }
    } on PlatformException {
      print('Failed to get initial link.');
    } catch (e) {
      print(e);
    }
  }

  Widget scanButton(context) {
    var aRow = widget.data.split("|");
    String _id = aRow[0];
    return RaisedButton(
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(40.0),
        ),
        color: Colors.red,
        textColor: Colors.white,
        padding: EdgeInsets.all(8.0),
        splashColor: Colors.red,
        onPressed: () //async {
            // await LaunchApp.openApp(
            //androidPackageName: 'com.spotify.music',

            //iosUrlScheme: 'pulsesecure://',
            //appStoreLink:
            //'itms-apps://itunes.apple.com/us/   app/pulse-secure/id945832041',
            // openStore: false
            //);
            // Enter thr package name of the App you  want to open and for iOS add the     URLscheme to the Info.plist file.
            // The second arguments decide wether the     app redirects PlayStore or AppStore.
            // For testing purpose you can enter com. instagram.android
            //Intent intent = new Intent (Intent.ACTION_VIEW);
            =>
            android_intent.Intent()
              ..setAction(android_action.Action.ACTION_VIEW)
              ..setData(Uri.parse("rektp://read?log_id=$_id"))
              ..startActivityForResult().then(
                (logs) => print(logs),
                onError: (e) => print(e.toString()),
              ),

        //},
        child: Row(
          mainAxisAlignment: MainAxisAlignment.center,
          crossAxisAlignment: CrossAxisAlignment.center,
          children: <Widget>[
            Icon(Icons.scanner),
            SizedBox(width: 9),
            Text('Scan KTP')
          ],
        ));
  }

  Widget loadButton(context) {
    return RaisedButton(
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(40.0),
        ),
        color: Colors.blue,
        textColor: Colors.white,
        padding: EdgeInsets.all(8.0),
        splashColor: Colors.blue,
        onPressed: () async {
          initUniLinks();
        },
        child: Row(
          mainAxisAlignment: MainAxisAlignment.center,
          crossAxisAlignment: CrossAxisAlignment.center,
          children: <Widget>[
            Icon(Icons.cloud_download),
            SizedBox(width: 9),
            Text('Load Data')
          ],
        ));
  }

  Widget saveButton(context) {
    var aRow = widget.data.split("|");
    return FlatButton(
      textColor: Colors.white,
      shape: CircleBorder(side: BorderSide(color: Colors.transparent)),
      onPressed: () {
        //formKey ADALAH GLOBAL KEY, KEMUDIAN DIIKUTI DENGAN currentState
        //LALU METHOD validate(), NILAINYA ADALAH FALSE / TRUE
        if (formKey.currentState.validate()) {
          //JIKA TRUE
          formKey.currentState.save(); //MAKA FUNGSI SAVE() DIJALANKAN

          String _id = aRow[0];
          String _nik = nik;
          String _nama = nama;
          String _tempatLahir = tempatLahir;
          String _tglLahir = tglLahir;
          String _jk = jk;
          String _alamat = alamat;
          String _rt = rt;
          String _rw = rw;
          String _kelurahan = kelurahan;
          String _kecamatan = kecamatan;
          String _agama = agama;
          String _statusKawin = statusKawin;
          String _pekerjaan = pekerjaan;
          String _wargaNegara = wargaNegara;
          Map<String, String> mRequest = {
            "_user": util.UserData.userName,
            "_session": util.UserData.userSession, //. dialokasikan
            "cmd": "update_data",
            "id": _id, //. ignored when *new* in server
            "nik": _nik,
            "nama": _nama,
            "tempatLahir": _tempatLahir,
            "tglLahir": _tglLahir,
            "jk": _jk,
            "alamat": _alamat,
            "rt": _rt,
            "rw": _rw,
            "kelurahan": _kelurahan,
            "kecamatan": _kecamatan,
            "agama": _agama,
            "statusKawin": _statusKawin,
            "pekerjaan": _pekerjaan,
            "wargaNegara": _wargaNegara,
          };
          util
              .showAlert(
                  context, "Update data $nama, are you sure ?", "Confirm")
              .then((b) {
            if (b == true) {
              util.showLoading(context, true);
              util.httpPost(util.url_api, mRequest).then((data) {
                util.showLoading(context, false);
                print(data);
                var jObject = json.decode(data);
                if (jObject != null) {
                  String vDesc = jObject["desc"];
                  //String vStatus = jObject["status"].toString();
                  //String vRetVal = vStatus + "#" + vDesc;
                  formKey.currentState.reset();
                  //. return
                  //Navigator.pop(context, vRetVal);
                  FocusManager.instance.primaryFocus.unfocus();
                  showInSnackBar(vDesc);
                  Navigator.push(
                    context,
                    MaterialPageRoute(
                        builder: (context) => DetailNasabah(data: _id)),
                  );
                }
              });
            }
          });
        }
      },
      child: Text('Simpan'),
    );
  }
}

class DOBInputFormatter extends TextInputFormatter {
  @override
  TextEditingValue formatEditUpdate(
      TextEditingValue oldValue, TextEditingValue newValue) {
    var text = newValue.text;

    if (newValue.selection.baseOffset == 0) {
      return newValue;
    }

    var buffer = new StringBuffer();
    var geser = 0;
    for (int i = 0; i < text.length; i++) {
      buffer.write(text[i]);
      var nonZeroIndex = i + 1;
      if (nonZeroIndex % 2 == 0 && nonZeroIndex != text.length) {
        if (geser == 2) {
          buffer.write(''); // Add double spaces.
        } else {
          buffer.write('-'); // Add double spaces.
        }
        geser = geser + 1;
      }
    }

    var string = buffer.toString();
    return newValue.copyWith(
        text: string,
        selection: new TextSelection.collapsed(offset: string.length));
  }
}
