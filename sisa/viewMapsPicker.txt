import 'dart:convert';
import 'dart:async';
import 'package:flutter/services.dart';
import 'package:flutter/material.dart';
//import 'package:google_map_location_picker/google_map_location_picker.dart';
//import 'package:google_maps_flutter/google_maps_flutter.dart';
//import 'package:geolocator/geolocator.dart';
//import 'package:toast/toast.dart';
import 'utils.dart' as util;

final String apiKey = 'AIzaSyA1MgLuZuyqR_OGY3ob3M52N46TDBRI_9k';

final Geolocator geolocator = Geolocator()..forceAndroidLocationManager;
//Position _currentPosition;
String _currentAddress;
String _currentCoordinate;
String _currentAddressOffice;
String _currentCoordinateOffice;

void main() => runApp(PinLok());

class PinLok extends StatefulWidget {
  final String data;
  PinLok({Key key, this.data});

  @override
  _MyAppState createState() => _MyAppState();
}

class _MyAppState extends State<PinLok> {
  //LocationResult _pickedLocation;
  final formKey = GlobalKey<FormState>(); //MEMBUAT GLOBAL KEY UNTUK VALIDASI
  final GlobalKey<ScaffoldState> _scaffoldKey = new GlobalKey<ScaffoldState>();

  void showInSnackBar(String value) {
    _scaffoldKey.currentState.showSnackBar(new SnackBar(
        action: SnackBarAction(
          label: 'Close',
          textColor: Colors.white,
          onPressed: () {
            // Code to execute.
          },
        ),
        duration: const Duration(milliseconds: 2500),
        backgroundColor: Colors.green.shade800,
        content: new Text(value)));
  }

  //bool _ready = false;
  List<dynamic> _lstDataMaps = [];
  //String _statusText = "";
  //TextEditingController _txtSearch = TextEditingController();
  //bool _flagAllowSearch = true;

  // DEFINE VARIABLE
  String koordinat = '';
  String alamatKoordinat = '';
  String koordinatKantor = '';
  String alamatKoordinatKantor = '';

  TextEditingController _koordinat;
  TextEditingController _alamatKoordinat;
  TextEditingController _koordinatKantor;
  TextEditingController _alamatKoordinatKantor;

  @override
  void initState() {
    _loadDataMaps().then((d) {
      setState(() {});
    });

    super.initState();
  }

  Future<dynamic> _loadDataMaps() async {
    var aRow = widget.data.split("|");
    Map<String, String> mRequest = {
      "_user": util.UserData.userName,
      "_session": util.UserData.userSession,
      "cmd": "get_koordinat_by_id",
      "id": aRow[0],
    };

    String data = await util.httpPost(util.url_api, mRequest);
    //_ready = true;
    var jObject = json.decode(data);
    //print('jobject: $jObject');
    if (jObject != null) {
      int vStatus = jObject["status"];
      String vDesc = jObject["desc"];
      //String v_cmd = jObject["cmd"];
      var vData = jObject["data"];
      if (vStatus == 1) {
        //. success
        _lstDataMaps = vData;
        dynamic _r = _lstDataMaps[0];
        _koordinat = TextEditingController(text: _r["koordinat"].toString());

        _alamatKoordinat =
            TextEditingController(text: _r["alamat_koordinat"].toString());
        _koordinatKantor =
            TextEditingController(text: _r["koordinat_kantor"].toString());
        _alamatKoordinatKantor = TextEditingController(
            text: _r["alamat_koordinat_kantor"].toString());
      } else if (vStatus == -99) {
        //. expired
        _lstDataMaps = [];
        return vDesc;
      } else {
        _lstDataMaps = [];
      }
    }
    FocusScope.of(context).nextFocus();

    return true;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      key: _scaffoldKey,
      appBar: AppBar(
          title: Text('Location Pick'), actions: <Widget>[saveButton(context)]),
      body: Builder(builder: (context) {
        return SingleChildScrollView(
            reverse: true,
            padding: EdgeInsets.symmetric(horizontal: 5, vertical: 5),
            child: Form(
              key: formKey, //MENGGUNAKAN GLOBAL KEY
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: <Widget>[
                  SizedBox(height: 15),
                  Card(
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(15.0),
                      ),
                      semanticContainer: true,
                      clipBehavior: Clip.antiAliasWithSaveLayer,
                      elevation: 3,
                      child: Padding(
                        padding: const EdgeInsets.only(left: 8.0, right: 8.0),
                        child: Column(
                          children: <Widget>[
                            SizedBox(height: 15),
                            Row(
                              children: <Widget>[
                                Flexible(
                                    child: Row(children: <Widget>[
                                  Icon(
                                    Icons.home,
                                    size: 28,
                                  ),
                                  SizedBox(
                                    width: 5,
                                  ),
                                  Text(
                                    'Rumah',
                                    style: TextStyle(fontSize: 18),
                                  ),
                                ])),
                                ClipOval(
                                  child: Material(
                                    color:
                                        Colors.green.shade800, // button color
                                    child: InkWell(
                                      splashColor:
                                          Colors.green, // inkwell color
                                      child: SizedBox(
                                          width: 64,
                                          height: 64,
                                          child: Icon(Icons.place,
                                              color: Colors.white)),
                                      onTap: () async {
                                        LocationResult result =
                                            await showLocationPicker(
                                          context, apiKey,
                                          initialCenter: LatLng(
                                              -6.201647178301788,
                                              106.79906095707956),
                                          automaticallyAnimateToCurrentLocation:
                                              true,
                                          //mapStylePath: 'assets/mapStyle.json',
                                          myLocationButtonEnabled: false,
                                          requiredGPS: true,
                                          layersButtonEnabled: false,
                                          // countries: ['AE', 'NG']
                                          searchBarBoxDecoration: null,
                                          //  resultCardAlignment: Alignment.bottomCenter,
                                          //desiredAccuracy: LocationAccuracy.best,
                                        );

                                        //print("result = $result");
                                        /*var lat = result.latLng.latitude;
                                          var long = result.latLng.longitude;
                                          List<Placemark> p =
                                              await geolocator.placemarkFromCoordinates(lat, long);
                                          Placemark place = p[0];
                                          _currentAddress =
                                              "${place.thoroughfare}, ${place.subThoroughfare}, ${place.locality}, ${place.subLocality}, ${place.subAdministrativeArea}, ${place.postalCode}";
                                        
                                          */
                                        //print("result 2 = $_currentAddress");
                                        //print("result 3 = $lat,$long");
                                        //
                                        try {
                                          var lat = result.latLng.latitude;
                                          var long = result.latLng.longitude;
                                          _currentCoordinate = "$lat,$long";
                                          _currentAddress = result.address;

                                          /*List<Placemark> p = await geolocator
                                              .placemarkFromCoordinates(lat, long);
                                          Placemark place = p[0];
                                          _currentAddress =
                                              "${place.thoroughfare}, ${place.subThoroughfare}, ${place.locality}, ${place.subLocality}, ${place.subAdministrativeArea}, ${place.postalCode}";
                                        */
                                        } catch (e) {
                                          print(e);
                                        }
                                        showInSnackBar("Lokasi diperbaharui");
                                        setState(() {});
                                      },
                                    ),
                                  ),
                                )
                              ],
                            ),
                            koordinatField(),
                            alamatKoordinatField(),
                            SizedBox(height: 33),
                          ],
                        ),
                      )),
                  SizedBox(height: 22),
                  Card(
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(15.0),
                      ),
                      semanticContainer: true,
                      clipBehavior: Clip.antiAliasWithSaveLayer,
                      elevation: 3,
                      child: Padding(
                        padding: const EdgeInsets.only(left: 8.0, right: 8.0),
                        child: Column(
                          children: <Widget>[
                            SizedBox(height: 15),
                            Row(
                              children: <Widget>[
                                Flexible(
                                    child: Row(children: <Widget>[
                                  Icon(
                                    Icons.work,
                                    size: 28,
                                  ),
                                  SizedBox(
                                    width: 5,
                                  ),
                                  Text(
                                    'Kantor',
                                    style: TextStyle(fontSize: 18),
                                  ),
                                ])),
                                ClipOval(
                                  child: Material(
                                    color:
                                        Colors.green.shade800, // button color
                                    child: InkWell(
                                      splashColor:
                                          Colors.green, // inkwell color
                                      child: SizedBox(
                                        width: 64,
                                        height: 64,
                                        child: Icon(Icons.place,
                                            color: Colors.white),
                                      ),
                                      onTap: () async {
                                        LocationResult result =
                                            await showLocationPicker(
                                          context, apiKey,
                                          initialCenter: LatLng(
                                              -6.201647178301788,
                                              106.79906095707956),
                                          automaticallyAnimateToCurrentLocation:
                                              true,
                                          // mapStylePath: 'assets/mapStyle.json',
                                          myLocationButtonEnabled: false,
                                          requiredGPS: true,
                                          layersButtonEnabled: false,
                                          // countries: ['AE', 'NG']
                                          searchBarBoxDecoration: null,
//                                         resultCardAlignment: Alignment.bottomCenter,
                                          //desiredAccuracy: LocationAccuracy.best,
                                        );

                                        try {
                                          var lat = result.latLng.latitude;
                                          var long = result.latLng.longitude;
                                          _currentCoordinateOffice =
                                              "$lat,$long";
                                          _currentAddressOffice =
                                              result.address;

                                          /*  List<Placemark> p = await geolocator
                                              .placemarkFromCoordinates(lat, long);
                                          Placemark place = p[0];
                                          _currentAddressOffice =
                                              "${place.thoroughfare}, ${place.subThoroughfare}, ${place.locality}, ${place.subLocality}, ${place.subAdministrativeArea}, ${place.postalCode}";
                                        */
                                        } catch (e) {
                                          print(e);
                                        }
                                        showInSnackBar("Lokasi diperbaharui");
                                        setState(() {});
                                      },
                                    ),
                                  ),
                                )
                              ],
                            ),
                            koordinatKantorField(),
                            alamatKoordinatKantorField(),
                            SizedBox(height: 33),
                          ],
                        ),
                      ))
                ],
              ),
            ));
      }),
    );
  }

  Widget koordinatField() {
    if (_currentCoordinate.toString() != 'null') {
      _koordinat = TextEditingController(text: _currentCoordinate.toString());
    }
    //MEMBUAT TEXT INPUT
    return TextFormField(
      autofocus: true,
      keyboardType: TextInputType.number,
      controller: _koordinat,
      decoration:
          InputDecoration(labelText: 'Koordinat' //DENGAN LABEL Nama Lengkap
              ),
      //validator:
      // validateNik, //validateName ADALAH NAMA FUNGSI PADA FILE validation.dart
      onSaved: (String value) {
        //KETIKA LOLOS VALIDASI
        koordinat =
            value; //MAKA VARIABLE name AKAN DIISI DENGAN TEXT YANG TELAH DI-INPUT
      },
    );
  }

  Widget alamatKoordinatField() {
    if (_currentAddress.toString() != 'null') {
      _alamatKoordinat =
          TextEditingController(text: _currentAddress.toString());
    }

    //MEMBUAT TEXT INPUT
    return TextFormField(
      controller: _alamatKoordinat,
      keyboardType: TextInputType.multiline,
      maxLines: 4,
      maxLength: 251,
      decoration:
          InputDecoration(labelText: 'Alamat' //DENGAN LABEL Nama Lengkap
              ),
      //validator:
      // validateNik, //validateName ADALAH NAMA FUNGSI PADA FILE validation.dart
      onSaved: (String value) {
        //KETIKA LOLOS VALIDASI
        alamatKoordinat =
            value; //MAKA VARIABLE name AKAN DIISI DENGAN TEXT YANG TELAH DI-INPUT
      },
    );
  }

  Widget koordinatKantorField() {
    if (_currentCoordinateOffice.toString() != 'null') {
      _koordinatKantor =
          TextEditingController(text: _currentCoordinateOffice.toString());
    }
    //MEMBUAT TEXT INPUT
    return TextFormField(
      autofocus: true,
      keyboardType: TextInputType.number,
      controller: _koordinatKantor,
      decoration:
          InputDecoration(labelText: 'Koordinat' //DENGAN LABEL Nama Lengkap
              ),
      //validator:
      // validateNik, //validateName ADALAH NAMA FUNGSI PADA FILE validation.dart
      onSaved: (String value) {
        //KETIKA LOLOS VALIDASI
        koordinatKantor =
            value; //MAKA VARIABLE name AKAN DIISI DENGAN TEXT YANG TELAH DI-INPUT
      },
    );
  }

  Widget alamatKoordinatKantorField() {
    if (_currentAddressOffice.toString() != 'null') {
      _alamatKoordinatKantor =
          TextEditingController(text: _currentAddressOffice.toString());
    }
    //MEMBUAT TEXT INPUT
    return TextFormField(
      controller: _alamatKoordinatKantor,
      keyboardType: TextInputType.multiline,
      maxLines: 4,
      maxLength: 251,
      decoration:
          InputDecoration(labelText: 'Alamat' //DENGAN LABEL Nama Lengkap
              ),
      //validator:
      // validateNik, //validateName ADALAH NAMA FUNGSI PADA FILE validation.dart
      onSaved: (String value) {
        //KETIKA LOLOS VALIDASI
        alamatKoordinatKantor =
            value; //MAKA VARIABLE name AKAN DIISI DENGAN TEXT YANG TELAH DI-INPUT
      },
    );
  }

  Widget saveButton(context) {
    var aRow = widget.data.split("|");
    return FlatButton(
      textColor: Colors.white,
      shape: CircleBorder(side: BorderSide(color: Colors.transparent)),
      onPressed: () {
        //formKey ADALAH GLOBAL KEY, KEMUDIAN DIIKUTI DENGAN currentState
        //LALU METHOD validate(), NILAINYA ADALAH FALSE / TRUE
        if (formKey.currentState.validate()) {
          //JIKA TRUE
          formKey.currentState.save(); //MAKA FUNGSI SAVE() DIJALANKAN

          String _id = aRow[0];
          String _koordinat = koordinat;
          String _alamatKoordinat = alamatKoordinat;
          String _koordinatKantor = koordinatKantor;
          String _alamatKoordinatKantor = alamatKoordinatKantor;
          Map<String, String> sRequest = {
            "_user": util.UserData.userName,
            "_session": util.UserData.userSession, //. dialokasikan
            "cmd": "update_data_koordinat",
            "id": _id, //. ignored when *new* in server
            "koordinat": _koordinat,
            "alamatKoordinat": _alamatKoordinat,
            "koordinatKantor": _koordinatKantor,
            "alamatKoordinatKantor": _alamatKoordinatKantor,
          };
          util
              .showAlert(
                  context, "Update Coordinate, Are you sure ?", "Confirm")
              .then((c) {
            if (c == true) {
              util.showLoading(context, true);
              util.httpPost(util.url_api, sRequest).then((data) {
                util.showLoading(context, false);
                //print(data);
                var jObject = json.decode(data);
                if (jObject != null) {
                  String vDesc = jObject["desc"];
                  //String vStatus = jObject["status"].toString();
                  //String vRetVal = vStatus + "#" + vDesc;
                  formKey.currentState.reset();
                  //. return
                  //Navigator.pop(context, vRetVal);
                  //FocusScope.of(context).isFirstFocus;
                  showInSnackBar(vDesc);
                  setState(() {});
                  _currentAddress = 'null';
                  _currentCoordinate = 'null';
                  _currentAddressOffice = 'null';
                  _currentCoordinateOffice = 'null';
                }
              });
            }
          });
        }
      },
      child: Text('Simpan'),
    );
  }
}
